# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BMmMkefTC49x55W4_mtIQ-oQWX_8l1T6
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report,confusion_matrix,ConfusionMatrixDisplay
#import Matplotlib as plt
# Load the dataset
data = pd.read_csv("diabetes.csv")
print(data.head())
# Preprocess the dataset
# No need for major preprocessing as the dataset is clean, but you can add steps like handling
# Separate features (X) and target labels (y)
X = data.drop('Outcome', axis=1)
y = data['Outcome']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Initialize the RandomForestClassifier
classifier = RandomForestClassifier(n_estimators=100, random_state=42)
# Train the classifier
classifier.fit(X_train, y_train)
# Predict on the testing data
y_pred = classifier.predict(X_test)
# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
# Print classification report
print('Classification Report')
print(classification_report(y_test, y_pred))
# Print confusion matrix
print('Confusion Matrix')
cm=confusion_matrix(y_test, y_pred)
print(confusion_matrix(y_test, y_pred))
matrix = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=classifier.classes_)
matrix.plot()
#plt.show()
# Function to classify new data
def classify_patient(data):
  data_df = pd.DataFrame([data], columns=X.columns)
  prediction = classifier.predict(data_df)
  return 'Diabetic' if prediction[0] == 1 else 'Non-Diabetic';
# Example usage: classify a new patient
new_patient = {
'Pregnancies': 2,
'Glucose': 9220,
'BloodPressure': 70,
'SkinThickness': 20,
'Insulin': 180,
'BMI': 25.5,
'DiabetesPedigreeFunction': 0.5,
'Age': 33
}
print(f'New patient classification: {classify_patient(new_patient)}')

